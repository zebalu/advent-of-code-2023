/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.zebalu.aoc2023.main;

import java.io.OutputStream;
import java.io.PrintStream;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.function.Consumer;

import io.github.zebalu.aoc2023.days.Day01;
import io.github.zebalu.aoc2023.days.Day02;
import io.github.zebalu.aoc2023.days.Day03;
import io.github.zebalu.aoc2023.days.Day04;
import io.github.zebalu.aoc2023.days.Day05;
import io.github.zebalu.aoc2023.days.Day06;
import io.github.zebalu.aoc2023.days.Day07;
import io.github.zebalu.aoc2023.days.Day08;
import io.github.zebalu.aoc2023.days.Day09;
import io.github.zebalu.aoc2023.days.Day10;
import io.github.zebalu.aoc2023.days.Day11;
import io.github.zebalu.aoc2023.days.Day12;
import io.github.zebalu.aoc2023.days.Day13;
import io.github.zebalu.aoc2023.days.Day14;
import io.github.zebalu.aoc2023.days.Day15;
import io.github.zebalu.aoc2023.days.Day16;
import io.github.zebalu.aoc2023.days.Day17;
import io.github.zebalu.aoc2023.days.Day18;
import io.github.zebalu.aoc2023.days.Day19;
import io.github.zebalu.aoc2023.days.Day20;
import io.github.zebalu.aoc2023.days.Day21;
import io.github.zebalu.aoc2023.days.Day22;

public class App {
    
    private static final int CONSOLE_WIDTH = 80;

    public static void main(String[] args) {
        if(args.length > 0 && "download".equals(args[0])) {
            String sessionId = System.getenv("AOC_SESSION_ID");
            if(sessionId == null || sessionId.isBlank()) {
                System.err.println("Session ID in environment variable AOC_SESSION_ID is not set correctly!");
                System.exit(1);
            }
            new Downloader(sessionId).downloadInputs();
        }
        Instant start = Instant.now();
        exec(new DisplayData(1, "Trebuchet?!", Day01::main));
        exec(new DisplayData(2, "Cube Conundrum", Day02::main));
        exec(new DisplayData(3, "Gear Ratios", Day03::main));
        exec(new DisplayData(4, "Scratchcards", Day04::main));
        exec(new DisplayData(5, "If You Give A Seed A Fertilizer", Day05::main));
        exec(new DisplayData(6, "Wait For It", Day06::main));
        exec(new DisplayData(7, "Camel Cards", Day07::main));
        exec(new DisplayData(8, "Haunted Wasteland", Day08::main));
        exec(new DisplayData(9, "Mirage Maintenance", Day09::main));
        exec(new DisplayData(10, "Pipe Maze", Day10::main));
        exec(new DisplayData(11, "Cosmic Expansion", Day11::main));
        exec(new DisplayData(12, "Hot Springs", Day12::main));
        exec(new DisplayData(13, "Point of Incidence", Day13::main));
        exec(new DisplayData(14, "Parabolic Reflector Dish", Day14::main));
        exec(new DisplayData(15, "Lens Library", Day15::main));
        exec(new DisplayData(16, "The Floor Will Be Lava", Day16::main));
        exec(new DisplayData(17, "Clumsy Crucible", Day17::main));
        exec(new DisplayData(18, "Lavaduct Lagoon", Day18::main));
        exec(new DisplayData(19, "Aplenty", Day19::main));
        exec(new DisplayData(20, "Pulse Propagation", Day20::main));
        exec(new DisplayData(21, "Step Counter", Day21::main));
        exec(new DisplayData(22, "Sand Slabs", Day22::main));
        Instant end = Instant.now();
        System.out.println("so far:\t"+Duration.between(start, end).toMillis()+" ms...");
    }

    private static void exec(DisplayData dd) {
        String title = String.format(" Day %02d: %s ", dd.number(), dd.name());
        StringBuilder titleLine = new StringBuilder();
        titleLine.append(repeat("#", (CONSOLE_WIDTH - title.length()) / 2));
        titleLine.append(title);
        titleLine.append(repeat("#", CONSOLE_WIDTH - titleLine.length()));
        System.out.println(titleLine.toString());
        PrintStream save = System.out;
        MeasuringPrintStream measuringStream = new MeasuringPrintStream(save);
        System.setOut(measuringStream);
        try {
            Instant start = Instant.now();
            dd.main().accept(new String[] {});
            Instant end = Instant.now();
            System.setOut(save);
            System.out.println(repeat("-", CONSOLE_WIDTH));
            System.out.println(
                    "part1 time:\t" + Duration.between(start, measuringStream.times.getFirst()).toMillis() + " ms");
            System.out.println("part2 time:\t"
                    + Duration.between(measuringStream.times.getFirst(), measuringStream.times.getLast()).toMillis()
                    + " ms");
            System.out.println("full time:\t" + Duration.between(start, end).toMillis() + " ms");
            System.out.println(repeat("*", CONSOLE_WIDTH));
        } finally {
            System.setOut(save);
        }
    }

    private static String repeat(String data, int times) {
        return String.join("", Collections.nCopies(times, data));
    }

    record DisplayData(int number, String name, Consumer<String[]> main) {
    }

    private static class MeasuringPrintStream extends PrintStream {
        private final List<Instant> times = new ArrayList<>();

        public MeasuringPrintStream(OutputStream out) {
            super(out);
        }

        @Override
        public void println(int i) {
            times.add(Instant.now());
            super.println(i);
        }

        public void println(long L) {
            times.add(Instant.now());
            super.println(L);
        }

        public void println(double d) {
            times.add(Instant.now());
            super.println(d);
        }

        public void println(String s) {
            times.add(Instant.now());
            super.println(s);
        }

        public void println(Object o) {
            times.add(Instant.now());
            super.println(o);
        }
    }
}
